<?php

/**
 * @file
 * Install, update and uninstall functions for the headsup module.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;

/**
 * Implements hook_install().
 *
 * @see hook_install()
 */
function headsup_install() {
  // Set default values for config which require dynamic values.
  \Drupal::configFactory()->getEditable('headsup.headsupsettings')
    ->set('headsup_list_page_title', 'Heads-up messages')
    ->save();

  \Drupal::configFactory()->getEditable('headsup.headsupsettings')
    ->set('headsup_list_pager_limit', '10')
    ->save();

  \Drupal::configFactory()->getEditable('headsup.headsupsettings')
    ->set('headsup_readmore_label', 'Read more')
    ->save();

  \Drupal::configFactory()->getEditable('headsup.headsupsettings')
    ->set('headsup_readless_label', 'Read less')
    ->save();

  \Drupal::configFactory()->getEditable('headsup.headsupsettings')
    ->set('headsup_acknowledge_label', 'I acknowledge')
    ->save();

  // Insert some example data into our schema.
  $entries = [
    [
      'nid' => -1,
      'uid' => -1,
      'date' => time(),
    ],
    [
      'nid' => -2,
      'uid' => -2,
      'date' => time(),
    ],
  ];

  $connection = \Drupal::database();
  foreach ($entries as $entry) {
    $connection->insert('headsup_acknowledgements')->fields($entry)->execute();
  }

  // Insert some default taxonomy terms into headsup_priority.
  $term = Term::create([
    'vid' => 'headsup_priority',
    'name' => 'High',
    'field_hup_color' => ['#990000'],
    'field_hup_weight' => [-6],
    'field_hup_css_class' => ['high-priority no-messing-about'],
    'weight' => 0,
  ]);
  $term->save();
  $term = Term::create([
    'vid' => 'headsup_priority',
    'name' => 'Medium',
    'field_hup_color' => ['#009900'],
    'field_hup_weight' => [-4],
    'field_hup_css_class' => ['medium-priority ho-hum'],
    'weight' => 1,
  ]);
  $term->save();
  $term = Term::create([
    'vid' => 'headsup_priority',
    'name' => 'Low',
    'field_hup_color' => ['#000099'],
    'field_hup_weight' => [0],
    'field_hup_css_class' => ['low-priority whatever'],
    'weight' => 2,
  ]);
  $term->save();
}

/**
 * Implements hook_uninstall().
 *
 * All nodes of type `opsbulletin` will be deleted, followed closely by
 * the content type itself. Scorched earth.
 */
function headsup_uninstall() {
  $entity_type_manager = \Drupal::entityTypeManager();

  // Delete all nodes of given content type.
  $storage_handler = $entity_type_manager
    ->getStorage('node');
  $nodes = $storage_handler->loadByProperties(['type' => 'headsup']);
  $storage_handler->delete($nodes);

  // Delete content type.
  $content_type = $entity_type_manager
    ->getStorage('node_type')
    ->load('headsup');
  $content_type->delete();

  // Delete taxonomy terms in `headsup_priority`.
  $tids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'headsup_priority')
    ->execute();

  $controller = $entity_type_manager->getStorage('taxonomy_term');
  $entities = $controller->loadMultiple($tids);
  $controller->delete($entities);

  $vocab = Vocabulary::load('headsup_priority');
  if (!is_null($vocab)) {
    $vocab->delete();
  }
}

/**
 * Implements hook_schema().
 *
 * Defines the database tables used by this module.
 *
 * @see hook_schema()
 */
function headsup_schema() {
  $schema['headsup_acknowledgements'] = [
    'description' => 'Links the nodes and the users to form a record of who acknowledged which heads-up and when.',
    'fields' => [
      'nid' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Node id of the heads-up in question",
      ],
      'uid' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User's {users}.uid",
      ],
      'date' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp of when the heads-up was acknowledged.',
      ],
    ],
    'primary key' => ['nid', 'uid'],
  ];

  return $schema;
}
